"""
–ü—Ä–æ—Å—Ç–æ–π stress test –¥–ª—è API
"""

import requests
import threading
import time
from concurrent.futures import ThreadPoolExecutor
import statistics

API_KEY = "your-secret-api-key-here"
BASE_URL = "http://localhost:8000"
HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}


def make_request(endpoint):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    start_time = time.time()
    try:
        response = requests.get(f"{BASE_URL}{endpoint}", headers=HEADERS, timeout=10)
        end_time = time.time()
        return {
            'success': response.status_code == 200,
            'time': end_time - start_time,
            'status_code': response.status_code
        }
    except Exception as e:
        end_time = time.time()
        return {
            'success': False,
            'time': end_time - start_time,
            'error': str(e)
        }


def stress_test(endpoint, num_requests=100, num_threads=10):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç stress test –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ endpoint"""
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint} - {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {num_threads} –ø–æ—Ç–æ–∫–æ–≤")

    start_time = time.time()
    results = []

    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = [executor.submit(make_request, endpoint) for _ in range(num_requests)]
        results = [future.result() for future in futures]

    end_time = time.time()
    total_time = end_time - start_time

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    successful_requests = [r for r in results if r['success']]
    failed_requests = [r for r in results if not r['success']]

    if successful_requests:
        response_times = [r['time'] for r in successful_requests]
        avg_response_time = statistics.mean(response_times)
        min_response_time = min(response_times)
        max_response_time = max(response_times)
        median_response_time = statistics.median(response_times)

        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_requests)}/{num_requests}")
        print(f"  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        print(f"  üìä RPS (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫): {num_requests / total_time:.2f}")
        print(f"  üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f} —Å–µ–∫")
        print(f"  üìà –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {median_response_time:.3f} —Å–µ–∫")
        print(f"  üìà –ú–∏–Ω/–ú–∞–∫—Å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {min_response_time:.3f}/{max_response_time:.3f} —Å–µ–∫")

    if failed_requests:
        print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed_requests)}")
        error_types = {}
        for req in failed_requests:
            error = req.get('error', f"HTTP {req.get('status_code', 'Unknown')}")
            error_types[error] = error_types.get(error, 0) + 1

        for error, count in error_types.items():
            print(f"     {error}: {count}")

    print()


def main():
    print("=== Stress Test –¥–ª—è Organizations API ===\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{BASE_URL}/buildings", headers=HEADERS, timeout=5)
        if response.status_code != 200:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return

    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
    endpoints_to_test = [
        "/buildings",
        "/organizations/by-building/1",
        "/organizations/by-activity/1",
        "/organizations/search/by-name?name=–∫–æ–º–ø–∞–Ω–∏—è",
        "/organizations/in-radius?latitude=55.7558&longitude=37.6176&radius=10"
    ]

    for endpoint in endpoints_to_test:
        stress_test(endpoint, num_requests=50, num_threads=5)

    print("üèÅ Stress test –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    main()